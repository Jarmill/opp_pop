mset clear
yalmip('clear')

RESOLVE = 1;

opts = opp_options;
opts.L = [-1, -0.5, 0, 0.5, 1];
opts.harmonics = opp_harmonics();
opts.partition = 1;
opts.TIME_INDEP = true;
opts.early_stop = 0;
opts.null_objective = false;
opts.Symmetry = 2;
opts.unipolar = 1;

opts.k = 32;

modulation = 0.9;
opts.Z_load = 1.0j;
opts.verbose = 0;

orderlist = 1:7;
Norder = length(orderlist);
% modulation = 1;
opts.harmonics.index_sin= [1;  3];
opts.harmonics.bound_sin = [modulation, modulation; -0.01, 0.01];


%% test a manager
MG = opp_manager(opts);
result_std = struct;
result_std.out = cell(1, Norder);
result_std.tdd_lower= NaN*ones(1, Norder);
result_std.solver_time  = NaN*ones(1, Norder);
result_std.preprocess_time  = NaN*ones(1, Norder);

result_resolve = struct;
result_resolve.out = cell(1, Norder);
result_resolve.tdd_lower= NaN*ones(1, Norder);
result_resolve.solver_time  = NaN*ones(1, Norder);
result_resolve.preprocess_time  = NaN*ones(1, Norder);

for i = 1:Norder
    order = orderlist(i);    
    sol = MG.run(order);    
    disp(sol)    
    
    %% diagnose the solution
    if sol.status==0
        ms = MG.mass_summary();
        pattern_rec = MG.recover_pattern();
        out = MG.recover(sol);
        result_std.out = out;
    
        % harm_valid = out.pattern.harm_valid;
        result_std.tdd_lower = out.tdd_lower;
        result_std.tdd_lower  = out.sol.solver_time;
        result_std.preprocess_time_(i) = out.sol.preprocess_time;

        %solve again
        if RESOLVE
            opts2 = opts;
            opts2.allowed_levels = out.pattern.levels;
            MG2 = opp_manager(opts2);
            sol2 = MG2.run(order);
            if sol2.status == 0
                out_resolve{i} = out;
    
                % harm_valid = out.pattern.harm_valid;
                tdd_lower_resolve(i) = out.tdd_lower;
                solver_time_resolve(i) = out.sol.solver_time;
                preprocess_time_resolve(i) = out.sol.preprocess_time;
         
            end
        end
        
    save('experiments/order_sweep_5.mat','result_std', 'result_resolve')
    
end


fprintf(strcat(summary_str, '\n'));

%% plotting 
    %plot the signal
    N = 1000;
th = linspace(0, 2*pi, N);

%function
if ~RESOLVE
    pu = out.pattern.u;
    pa = out.pattern.alpha;
    thi = [0, pa, 2*pi];
    xi = out.pattern.I;
    % I0_rec = out.pattern.I(1);
else
    pu = out2.pattern.u;
    pa = out2.pattern.alpha;
    thi = [0, pa, 2*pi];
    xi = out2.pattern.I;
    % I0_rec = out2.pattern.I(1);
end
x = pulse_func(th, pu, pa);
% I0_rec = M.modes{1}{2}.init(1,5);
% I0_rec = M.modes{1}{3}.init(1,5);

%need to perform appropriate scaling
% xi = 
% [t, y] = ode45(@(t, th) pulse_func(th, pattern.u, pattern.alpha), [0, 2*pi], I0_rec*pi);


cc = linspecer(3);
figure(1)
clf
tiledlayout(3, 1)
nexttile
hold on
plot(th, modulation*sin(th), 'k', 'linewidth', 3);
plot(th, x, 'linewidth', 3, 'color', cc(1, :))
plot([0, 2*pi], [0, 0], ':k')

ylabel('$u(\theta)$', 'Interpreter', 'latex', 'FontSize',14);

xlim([0, 2*pi]) 
% title(summary_str, ...
    % 'FontSize',16, 'Interpreter', 'latex')

nexttile
hold on
plot(th, -modulation*cos(th), 'k', 'linewidth', 3);
plot(thi, xi, 'linewidth', 3, 'color', cc(2, :));
plot([0, 2*pi], [0, 0], ':k')
ylabel('$I(\theta)$', 'Interpreter', 'latex', 'FontSize',14);
xlim([0, 2*pi]) 

nexttile
hold on
xi_query = interp1(thi,xi, th);
plot(th, xi_query+modulation*cos(th), 'linewidth', 3, 'color', cc(3, :));
plot([0, 2*pi], [0, 0], ':k')
xlim([0, 2*pi])
ylabel('$I(\theta)-I^*(\theta)$', 'Interpreter', 'latex', 'FontSize',14);
xlabel('$\theta$', 'Interpreter', 'latex', 'FontSize',14);


nmax = 20;
[na, nb] = pulse_harmonics(nmax, pu, pa);

end
